{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useEffect, useRef } from \"react\";\n\n// export function useOnDraw(onDraw){\n//     const canvasRef = useRef(null);\n\n//     const isDrawingRef = useRef(false);\n\n//     const mouseMoveListenerRef = useRef(null);\n//     const mouseDownListenerRef = useRef(null);\n//     const mouseUpListenerRef = useRef(null);\n\n//     useEffect(() => {\n//         return () => {\n//             if(mouseMoveListenerRef.current) {\n//                 window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n//             }\n//             if(mouseUpListenerRef.current) {\n//                 window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n//             }\n//         }\n//     })\n\n//     function setCanvasRef(ref){\n//         if(!ref) return;\n//         if(canvasRef.current){\n//             canvasRef.current.removeEventListener(\"mousedown\", mouseDownListenerRef.current);\n//         }\n//         canvasRef.current = ref;\n//         initMouseMoveListener();\n//         initMouseDownListener();\n//         initMouseUpListener();\n//     }\n\n//     function initMouseMoveListener(){\n//         const mouseMoveListener = (e) =>{\n//             if(isDrawingRef.current == true){\n//                 const point = computePointInCanvas(e.clientX, e.clientY);\n//                 console.log('point:' + point)\n//                 // const point = {x: e.clientX, y:e.clientY};\n//                 const ctx = canvasRef.current.getContext('2d');\n//                 if(onDraw) onDraw(ctx, point);\n//             }\n//         }\n//         mouseMoveListenerRef.current = mouseMoveListener;\n//         window.addEventListener('mousemove', mouseMoveListener)\n//     }\n\n//     function initMouseDownListener(){\n//         if (!canvasRef.current) return;\n//         const listener = () => {\n//             isDrawingRef.current = true;\n//         }\n//         mouseDownListenerRef.current = listener;\n//         canvasRef.current.addEventListener(\"mousedown\", listener);\n//     }\n\n//     function initMouseUpListener(){\n//         if (!canvasRef.current) return;\n//         const listener = () => {\n//             isDrawingRef.current = false;\n//         }\n//         mouseUpListenerRef.current = listener;\n//         window.addEventListener(\"mouseup\", listener);\n//     }\n\n//     // so that x and y coords are relative to canvas, not entire window\n//     function computePointInCanvas(clientX, clientY){\n//         if(canvasRef.current){\n//             const boundingRect = canvasRef.current.getBoundingClientRect();\n//             return{\n//                 x: clientX - boundingRect.left,\n//                 y: clientY - boundingRect.top\n//             }\n//         } else{\n//             return null;\n//         }\n\n//     }\n\n//     return setCanvasRef;\n// }\n\nimport { useEffect, useRef } from \"react\";\nexport function useOnDraw(onDraw) {\n  _s();\n  const canvasRef = useRef(null);\n  const isDrawingRef = useRef(false);\n  const prevPointRef = useRef(null);\n  const mouseMoveListenerRef = useRef(null);\n  const mouseUpListenerRef = useRef(null);\n  function setCanvasRef(ref) {\n    canvasRef.current = ref;\n  }\n  function onCanvasMouseDown() {\n    isDrawingRef.current = true;\n  }\n  useEffect(() => {\n    function computePointInCanvas(clientX, clientY) {\n      if (canvasRef.current) {\n        const boundingRect = canvasRef.current.getBoundingClientRect();\n        return {\n          x: clientX - boundingRect.left,\n          y: clientY - boundingRect.top\n        };\n      } else {\n        return null;\n      }\n    }\n    function initMouseMoveListener() {\n      const mouseMoveListener = e => {\n        if (isDrawingRef.current && canvasRef.current) {\n          const point = computePointInCanvas(e.clientX, e.clientY);\n          const ctx = canvasRef.current.getContext('2d');\n          if (onDraw) onDraw(ctx, point, prevPointRef.current);\n          prevPointRef.current = point;\n          console.log(point);\n        }\n      };\n      mouseMoveListenerRef.current = mouseMoveListener;\n      window.addEventListener(\"mousemove\", mouseMoveListener);\n    }\n    function initMouseUpListener() {\n      const listener = () => {\n        isDrawingRef.current = false;\n        prevPointRef.current = null;\n      };\n      mouseUpListenerRef.current = listener;\n      window.addEventListener(\"mouseup\", listener);\n    }\n    function cleanup() {\n      if (mouseMoveListenerRef.current) {\n        window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current);\n      }\n      if (mouseUpListenerRef.current) {\n        window.removeEventListener(\"mouseup\", mouseUpListenerRef.current);\n      }\n    }\n    initMouseMoveListener();\n    initMouseUpListener();\n    return () => cleanup();\n  }, [onDraw]);\n  return {\n    setCanvasRef,\n    onCanvasMouseDown\n  };\n}\n_s(useOnDraw, \"yzQlUgpjSmNqxYCWmikAILNmSuw=\");\n;","map":{"version":3,"names":["useEffect","useRef","useOnDraw","onDraw","canvasRef","isDrawingRef","prevPointRef","mouseMoveListenerRef","mouseUpListenerRef","setCanvasRef","ref","current","onCanvasMouseDown","computePointInCanvas","clientX","clientY","boundingRect","getBoundingClientRect","x","left","y","top","initMouseMoveListener","mouseMoveListener","e","point","ctx","getContext","console","log","window","addEventListener","initMouseUpListener","listener","cleanup","removeEventListener"],"sources":["/Users/anyiwang/Library/CloudStorage/OneDrive-NanyangTechnologicalUniversity/FYP/UI/react_basics/reactapp1/src/components/hooks.js"],"sourcesContent":["// import { useEffect, useRef } from \"react\";\n\n// export function useOnDraw(onDraw){\n//     const canvasRef = useRef(null);\n\n//     const isDrawingRef = useRef(false);\n\n//     const mouseMoveListenerRef = useRef(null);\n//     const mouseDownListenerRef = useRef(null);\n//     const mouseUpListenerRef = useRef(null);\n\n//     useEffect(() => {\n//         return () => {\n//             if(mouseMoveListenerRef.current) {\n//                 window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n//             }\n//             if(mouseUpListenerRef.current) {\n//                 window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n//             }\n//         }\n//     })\n\n//     function setCanvasRef(ref){\n//         if(!ref) return;\n//         if(canvasRef.current){\n//             canvasRef.current.removeEventListener(\"mousedown\", mouseDownListenerRef.current);\n//         }\n//         canvasRef.current = ref;\n//         initMouseMoveListener();\n//         initMouseDownListener();\n//         initMouseUpListener();\n//     }\n\n//     function initMouseMoveListener(){\n//         const mouseMoveListener = (e) =>{\n//             if(isDrawingRef.current == true){\n//                 const point = computePointInCanvas(e.clientX, e.clientY);\n//                 console.log('point:' + point)\n//                 // const point = {x: e.clientX, y:e.clientY};\n//                 const ctx = canvasRef.current.getContext('2d');\n//                 if(onDraw) onDraw(ctx, point);\n//             }\n//         }\n//         mouseMoveListenerRef.current = mouseMoveListener;\n//         window.addEventListener('mousemove', mouseMoveListener)\n//     }\n\n//     function initMouseDownListener(){\n//         if (!canvasRef.current) return;\n//         const listener = () => {\n//             isDrawingRef.current = true;\n//         }\n//         mouseDownListenerRef.current = listener;\n//         canvasRef.current.addEventListener(\"mousedown\", listener);\n//     }\n\n//     function initMouseUpListener(){\n//         if (!canvasRef.current) return;\n//         const listener = () => {\n//             isDrawingRef.current = false;\n//         }\n//         mouseUpListenerRef.current = listener;\n//         window.addEventListener(\"mouseup\", listener);\n//     }\n\n//     // so that x and y coords are relative to canvas, not entire window\n//     function computePointInCanvas(clientX, clientY){\n//         if(canvasRef.current){\n//             const boundingRect = canvasRef.current.getBoundingClientRect();\n//             return{\n//                 x: clientX - boundingRect.left,\n//                 y: clientY - boundingRect.top\n//             }\n//         } else{\n//             return null;\n//         }\n        \n//     }\n\n//     return setCanvasRef;\n// }\n\nimport { useEffect, useRef } from \"react\";\n\nexport function useOnDraw(onDraw) {\n\n    const canvasRef = useRef(null);\n    const isDrawingRef = useRef(false);\n    const prevPointRef = useRef(null);\n\n    const mouseMoveListenerRef = useRef(null);\n    const mouseUpListenerRef = useRef(null);\n\n    function setCanvasRef(ref) {\n        canvasRef.current = ref;\n    }\n\n    function onCanvasMouseDown() {\n        isDrawingRef.current = true;\n    }\n\n    useEffect(() => {\n        function computePointInCanvas(clientX, clientY) {\n            if (canvasRef.current) {\n                const boundingRect = canvasRef.current.getBoundingClientRect();\n                return {\n                    x: clientX - boundingRect.left,\n                    y: clientY - boundingRect.top\n                }\n            } else {\n                return null;\n            }\n\n        }\n        function initMouseMoveListener() {\n            const mouseMoveListener = (e) => {\n                if (isDrawingRef.current && canvasRef.current) {\n                    const point = computePointInCanvas(e.clientX, e.clientY);\n                    const ctx = canvasRef.current.getContext('2d');\n                    if (onDraw) onDraw(ctx, point, prevPointRef.current);\n                    prevPointRef.current = point;\n                    console.log(point);\n                }\n            }\n            mouseMoveListenerRef.current = mouseMoveListener;\n            window.addEventListener(\"mousemove\", mouseMoveListener);\n        }\n\n        function initMouseUpListener() {\n            const listener = () => {\n                isDrawingRef.current = false;\n                prevPointRef.current = null;\n            }\n            mouseUpListenerRef.current = listener;\n            window.addEventListener(\"mouseup\", listener);\n        }\n\n        function cleanup() {\n            if (mouseMoveListenerRef.current) {\n                window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current);\n            }\n            if (mouseUpListenerRef.current) {\n                window.removeEventListener(\"mouseup\", mouseUpListenerRef.current);\n            }\n        }\n\n        initMouseMoveListener();\n        initMouseUpListener();\n        return () => cleanup();\n\n    }, [onDraw]);\n\n    return {\n        setCanvasRef,\n        onCanvasMouseDown\n    }\n\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}